/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Tweet as PrismaTweet,
  Hashtag as PrismaHashtag,
  User as PrismaUser,
} from "@prisma/client";
import { TweetDto } from "../TweetDto";

export class TweetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TweetCountArgs, "select">): Promise<number> {
    return this.prisma.tweet.count(args);
  }

  async tweets<T extends Prisma.TweetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TweetFindManyArgs>
  ): Promise<PrismaTweet[]> {
    return this.prisma.tweet.findMany<Prisma.TweetFindManyArgs>(args);
  }
  async tweet<T extends Prisma.TweetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TweetFindUniqueArgs>
  ): Promise<PrismaTweet | null> {
    return this.prisma.tweet.findUnique(args);
  }
  async createTweet<T extends Prisma.TweetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TweetCreateArgs>
  ): Promise<PrismaTweet> {
    return this.prisma.tweet.create<T>(args);
  }
  async updateTweet<T extends Prisma.TweetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TweetUpdateArgs>
  ): Promise<PrismaTweet> {
    return this.prisma.tweet.update<T>(args);
  }
  async deleteTweet<T extends Prisma.TweetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TweetDeleteArgs>
  ): Promise<PrismaTweet> {
    return this.prisma.tweet.delete(args);
  }

  async findHashtags(
    parentId: string,
    args: Prisma.HashtagFindManyArgs
  ): Promise<PrismaHashtag[]> {
    return this.prisma.tweet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .hashtags(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.tweet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetTweets(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListTweets(args: string): Promise<TweetDto[]> {
    throw new Error("Not implemented");
  }
}
